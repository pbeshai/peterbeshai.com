{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["GitHubStarButton","githubUrl","split","user","repo","src","title","frameBorder","scrolling","width","height","Section","header","children","other","pt","pb","px","pl","my","GridSection","gridSize","p","gridGap","gridTemplateColumnsFill","GridItem","url","banner","subhead","lineHeight","to","mb","fluid","childImageSharp","as","color","fontSize","mt","GitHubGridItem","github","npmId","alt","props","theme","colors","cyan","IndexPage","data","blog","projects","experiments","page","hideNavTitle","hideNav","property","content","minHeight","flexDirection","py","alignItems","justifyContent","bg","fontWeight","showTitle","hideHome","id","edges","map","node","frontmatter","fields","slug","date","display","host","company","open_source","item","npm_id","description","query"],"mappings":"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","file":"component---src-pages-index-js-e50b6c033925807b95e4.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport styled, { css } from 'styled-components';\n\nimport {\n  Image,\n  UnderlinedHeader,\n  Text,\n  Box,\n  Flex,\n  Link,\n  Header,\n  Grid,\n} from '../components/core';\nimport Layout from '../components/layout';\nimport Nav from '../components/Nav';\n\n// using 'github-buttons/dist/react' didn't work since it references window (problems during build)\nconst GitHubStarButton = ({ githubUrl }) => {\n  const [user, repo] = githubUrl.split('github.com/')[1].split('/');\n  return (\n    <iframe\n      src={`https://ghbtns.com/github-btn.html?user=${user}&repo=${repo}&type=star&count=true`}\n      title={`GitHub Stars for @${user}/${repo}`}\n      frameBorder=\"0\"\n      scrolling=\"0\"\n      width=\"170px\"\n      height=\"20px\"\n    />\n  );\n};\n\nconst Section = ({ header, children, ...other }) => (\n  <Box pt={3} pb={6} px={3} {...other}>\n    <Box pl={3}>\n      <UnderlinedHeader my={3}>{header}</UnderlinedHeader>\n    </Box>\n    {children}\n  </Box>\n);\n\nconst GridSection = ({ gridSize = 4, children, ...other }) => (\n  <Section {...other}>\n    <Grid p={3} gridGap={4} gridTemplateColumnsFill={gridSize}>\n      {children}\n    </Grid>\n  </Section>\n);\n\nconst GridItem = ({ url, banner, title, subhead }) => (\n  <Text lineHeight={1.5}>\n    <Link to={url}>\n      {banner && <Image mb={2} fluid={banner.childImageSharp.fluid} />}\n      <Text as=\"span\">{title}</Text>\n    </Link>\n    <Text color={'gray.6'} fontSize={1} mt={1}>\n      {subhead}\n    </Text>\n  </Text>\n);\n\nconst GitHubGridItem = ({ url, github, title, npmId = title, subhead }) => (\n  <Text lineHeight={1.5}>\n    <Link to={url}>\n      <Text as=\"span\">{title}</Text>\n    </Link>\n    <Box mt={2}>\n      <GitHubStarButton githubUrl={github}>Star</GitHubStarButton>\n    </Box>\n    <Box mt={1}>\n      <img alt=\"npm\" src={`https://img.shields.io/npm/v/${npmId}.svg`} />{' '}\n      <img alt=\"npm\" src={`https://img.shields.io/npm/dm/${npmId}.svg`} />\n    </Box>\n    <Text color={'gray.6'} fontSize={1}>\n      {subhead}\n    </Text>\n  </Text>\n);\n\nconst IndexPage = ({ data }) => {\n  const { blog, projects, experiments, page } = data;\n\n  return (\n    <Layout hideNavTitle hideNav>\n      <Helmet>\n        <meta property=\"og:type\" content=\"website\" />\n      </Helmet>\n      <Flex minHeight=\"100vh\" flexDirection=\"column\">\n        <Flex\n          minHeight=\"80vh\"\n          py={50}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Box width={350} px={3}>\n            <Flex mb=\"4\">\n              <Text\n                bg=\"black\"\n                color=\"white\"\n                px={3}\n                py={2}\n                lineHeight={1}\n                css={css`\n                  border-radius: 5px;\n                  box-shadow: 5px 6px ${(props) => props.theme.colors.cyan[4]};\n                `}\n                fontSize={4}\n                fontWeight={700}\n              >\n                Peter Beshai\n              </Text>\n            </Flex>\n            <p>Hey, I'm Peter!</p>\n            <p>\n              I'm a software engineer and designer with a passion for making\n              high performance, delightful user experiences on the web,\n              typically involving data visualization.\n            </p>\n          </Box>\n        </Flex>\n        <Nav showTitle={false} hideHome />\n        <GridSection id=\"writing\" header=\"Writing\" bg=\"white\" gridSize={4}>\n          {blog &&\n            blog.edges.map(({ node }) => {\n              return (\n                <GridItem\n                  key={node.id}\n                  url={node.frontmatter.url || node.fields.slug}\n                  banner={node.frontmatter.banner}\n                  title={node.frontmatter.title}\n                  subhead={\n                    <>\n                      {node.frontmatter.date}\n                      <Text color={'gray.6'} fontSize={1} display=\"inline\">\n                        {node.frontmatter.host &&\n                          ` on ${node.frontmatter.host}`}\n                      </Text>\n                    </>\n                  }\n                />\n              );\n            })}\n        </GridSection>\n\n        <GridSection\n          id=\"projects\"\n          header=\"Projects\"\n          bg=\"gray.0\"\n          gridSize={[4, 6]}\n        >\n          {projects &&\n            projects.edges.map(({ node }) => {\n              return (\n                <GridItem\n                  key={node.id}\n                  url={node.frontmatter.url || node.fields.slug}\n                  banner={node.frontmatter.banner}\n                  title={node.frontmatter.title}\n                  subhead={\n                    <>\n                      {node.frontmatter.date}\n                      <Text color={'gray.6'} fontSize={1} display=\"inline\">\n                        {node.frontmatter.company &&\n                          ` at ${node.frontmatter.company}`}\n                      </Text>\n                    </>\n                  }\n                />\n              );\n            })}\n        </GridSection>\n\n        <GridSection\n          id=\"experiments\"\n          header=\"Experiments\"\n          bg=\"white\"\n          gridSize={3}\n        >\n          {experiments &&\n            experiments.edges.map(({ node }) => {\n              return (\n                <GridItem\n                  key={node.id}\n                  url={node.frontmatter.url || node.fields.slug}\n                  banner={node.frontmatter.banner}\n                  title={node.frontmatter.title}\n                  subhead={node.frontmatter.date}\n                />\n              );\n            })}\n        </GridSection>\n\n        <GridSection\n          id=\"open-source\"\n          header=\"Open Source\"\n          bg=\"gray.0\"\n          gridSize={3}\n        >\n          {page.frontmatter.open_source &&\n            page.frontmatter.open_source.map((item) => {\n              return (\n                <GitHubGridItem\n                  key={item.url}\n                  url={item.url}\n                  github={item.github}\n                  title={item.title}\n                  npmId={item.npm_id ?? item.title}\n                  subhead={item.description}\n                />\n              );\n            })}\n        </GridSection>\n      </Flex>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\n// need regex filter on blog to make sure we do not include README.md near demos\nexport const query = graphql`\n  query {\n    page: markdownRemark(frontmatter: { path: { eq: \"/\" } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        open_source {\n          url\n          title\n          description\n          github\n          npm_id\n        }\n      }\n    }\n\n    blog: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"//blog/(.*)/index.md/\" }\n        frontmatter: { layout: { ne: \"demo\" } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            layout\n            title\n            date(formatString: \"MMMM D, YYYY\")\n            excerpt\n            host\n            url\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 540, maxHeight: 340, quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    projects: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fileAbsolutePath: { regex: \"//projects/(.*)/index.md/\" } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"YYYY\")\n            company\n            url\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 800, maxHeight: 400, quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    experiments: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fileAbsolutePath: { regex: \"//experiments/(.*)/index.md/\" } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMMM YYYY\")\n            url\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 540, maxHeight: 340, quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}